{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","map","ingredient","text","src","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAkBeA,EAfA,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,SAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACpC,OACI,sBAAKC,UAAU,SAAf,UACI,6BAAKJ,IACL,6BACKG,EAAYE,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,YAGxB,4BAAIN,IACJ,qBAAKG,UAAU,QAAQI,IAAKN,Q,MC+CzBO,MAxDf,WAEE,IAFa,EAIiBC,mBAAS,IAJ1B,mBAINC,EAJM,KAIGC,EAJH,OAKeF,mBAAS,IALxB,mBAKNG,EALM,KAKEC,EALF,OAMaJ,mBAAS,WANtB,mBAMNK,EANM,KAMCC,EAND,KAQbC,qBAAW,WACTC,MACA,CAACH,IAEH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAXf,WAWe,oBAVd,qCASG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAqBhB,OACE,sBAAKpB,UAAU,MAAf,UACE,uBAAMuB,SAZQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KASmBV,UAAU,cAArC,UACE,uBAAO0B,KAAK,OAAO1B,UAAU,aAAa2B,MAAOlB,EAAQmB,SAjB1C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAiBf,wBAAQ3B,UAAU,gBAAgB0B,KAAK,SAAvC,uBAEF,qBAAK1B,UAAU,UAAf,SACCO,EAAQN,KAAI,SAAA6B,GAAM,OACjB,aADwB,CACvB,EAAD,CAEAlC,MAAOkC,EAAOA,OAAOC,MACrBlC,SAAUiC,EAAOA,OAAOjC,SACxBC,MAAOgC,EAAOA,OAAOhC,MACrBC,YAAa+B,EAAOA,OAAO/B,aAJtB+B,EAAOA,OAAOC,gBClCZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2a98fd92.chunk.js","sourcesContent":["import React from 'react'\nimport'./recipe_module.css';\n\nconst Recipe = ({title, calories,image, ingredients}) => {\n    return (\n        <div className='recipe'>\n            <h1>{title}</h1>\n            <ol>\n                {ingredients.map(ingredient =>(\n                    <li>{ingredient.text}</li>\n                ))}\n            </ol>\n            <p>{calories}</p>\n            <img className='image' src={image}/>            \n        </div>\n    )\n}\n\nexport default Recipe\n","import Recipe from './Recipe'\nimport './App.css';\nimport React,{useState, useEffect} from 'react'\n\nfunction App() {\n\n  const APP_ID = '49568502';\n  const APP_KEY = 'f6ad0cb43b7a4962add78d5a301e6b90';\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n\n  useEffect( () => {\n    getRecipes();\n  },[query]) //``submit押した時にようやくeffect\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await response.json(); //fetch 使うときはawait\n    setRecipes(data.hits)\n    console.log(data.hits)\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value); //inputのなかで書かれたものに更新される\n  }\n\n  const getSearch = e => {  //ボタンが押された時だけ更新されて欲しい\n    e.preventDefault();\n    setQuery(search)　　//全部書き終わって、ボタンを押すところまで\n    setSearch('') ;//buttonの中身リセット\n\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <form　onSubmit={getSearch} className=\"search-form\">\n        <input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch}/>\n        <button className=\"search-button\" type=\"submit\" >search</button>\n      </form>\n      <div className='recipes'>\n      {recipes.map(recipe => (  //mapの第一引数は、recipesの中身１つ１つのこと。\n        <Recipe \n        key={recipe.recipe.label} \n        title={recipe.recipe.label} \n        calories={recipe.recipe.calories}\n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        />\n      ))}\n      </div>\n     \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}